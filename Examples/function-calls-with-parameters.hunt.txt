; ModuleID = 'Hunt'
source_filename = "Hunt"

@0 = private unnamed_addr constant [30 x i8] c"Hello from advanced_function\0A\00", align 1
@1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@2 = private unnamed_addr constant [9 x i8] c"Number: \00", align 1
@3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@4 = private unnamed_addr constant [7 x i8] c"%s%d%s\00", align 1
@5 = private unnamed_addr constant [9 x i8] c"String: \00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [7 x i8] c"%s%s%s\00", align 1
@8 = private unnamed_addr constant [42 x i8] c"Hello from hunt before advanced_function\0A\00", align 1
@9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@10 = private unnamed_addr constant [10 x i8] c"Foo hello\00", align 1
@11 = private unnamed_addr constant [41 x i8] c"Hello from hunt after advanced_function\0A\00", align 1
@12 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

define i32 @main() {
EntryBlock:
  call void @hunt()
  ret i32 0
}

declare i32 @strcmp(i8*, i8*)

declare i32 @printf(i8*, ...)

define internal void @advanced_function(i8 %number, i8* %str) {
entry:
  %number1 = alloca i8, align 1
  store i8 %number, i8* %number1, align 1
  %str2 = alloca i8*, align 8
  store i8* %str, i8** %str2, align 8
  %0 = call i32 (i8*, ...) @printf([3 x i8]* @1, [30 x i8]* @0)
  %1 = load i8, i8* %number1, align 1
  %2 = call i32 (i8*, ...) @printf([7 x i8]* @4, [9 x i8]* @2, i8 %1, [2 x i8]* @3)
  %3 = load i8*, i8** %str2, align 8
  %4 = call i32 (i8*, ...) @printf([7 x i8]* @7, [9 x i8]* @5, i8* %3, [2 x i8]* @6)
  ret void
}

define internal void @hunt() {
entry:
  %0 = call i32 (i8*, ...) @printf([3 x i8]* @9, [42 x i8]* @8)
  %my_str = alloca i8*, align 8
  store [10 x i8]* @10, i8** %my_str, align 8
  %1 = load i8*, i8** %my_str, align 8
  call void @advanced_function(i8 8, i8* %1)
  %2 = call i32 (i8*, ...) @printf([3 x i8]* @12, [41 x i8]* @11)
  ret void
}
