; ModuleID = 'Hunt'
source_filename = "Hunt"

@0 = private unnamed_addr constant [8 x i8] c"While #\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [7 x i8] c"%s%d%s\00", align 1

define i32 @main() {
EntryBlock:
  call void @hunt()
  ret i32 0
}

define internal void @hunt() !dbg !3 {
entry:
  %foo = alloca i8, align 1, !dbg !7
  store i8 1, i8* %foo, align 1, !dbg !7
  call void @llvm.dbg.declare(metadata i8* %foo, metadata !8, metadata !DIExpression()), !dbg !10
  br label %while-loop, !dbg !7

while-loop:                                       ; preds = %while-body, %entry
  %0 = load i8, i8* %foo, align 1, !dbg !7
  %1 = icmp sle i8 %0, 10, !dbg !7
  br i1 %1, label %while-body, label %after-while-loop, !dbg !7

while-body:                                       ; preds = %while-loop
  %2 = load i8, i8* %foo, align 1, !dbg !11
  %3 = call i32 (i8*, ...) @printf([7 x i8]* @2, [8 x i8]* @0, i8 %2, [2 x i8]* @1), !dbg !11
  %4 = load i8, i8* %foo, align 1, !dbg !11
  %next-foo = add i8 %4, 1, !dbg !11
  store i8 %next-foo, i8* %foo, align 1, !dbg !11
  br label %while-loop, !dbg !11

after-while-loop:                                 ; preds = %while-loop
  ret void, !dbg !11
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

declare i32 @printf(i8*, ...)

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "Hunter Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "while-loop.hunt", directory: "./Examples")
!2 = !{}
!3 = distinct !DISubprogram(name: "hunt", scope: !1, file: !1, line: 1, type: !4, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void", size: 64)
!7 = !DILocation(line: 2, column: 8, scope: !3)
!8 = !DILocalVariable(name: "foo", scope: !3, file: !1, line: 2, type: !9)
!9 = !DIBasicType(name: "int", size: 8)
!10 = !DILocation(line: 2, scope: !3)
!11 = !DILocation(line: 4, column: 14, scope: !3)
